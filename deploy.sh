#!/bin/bash
# Quick deployment script for DAGO to remote server

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}üöÄ DAGO Deployment Script${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

# Check if server details provided
if [ -z "$1" ]; then
    echo -e "${RED}‚ùå Error: Server address required${NC}"
    echo ""
    echo "Usage: ./deploy.sh user@your-server.com [deploy-path]"
    echo ""
    echo "Examples:"
    echo "  ${GREEN}Regular user (recommended):${NC}"
    echo "  ./deploy.sh ubuntu@yourserver.com /home/ubuntu/dago"
    echo "  ./deploy.sh dan@123.45.67.89 /home/dan/dago"
    echo ""
    echo "  ${YELLOW}Root user:${NC}"
    echo "  ./deploy.sh root@yourserver.com /srv"
    echo ""
    echo "üí° Tip: Use a path where your SSH user has write permissions!"
    echo "   Home directory always works: /home/your-username/dago"
    exit 1
fi

SERVER=$1
DEPLOY_PATH=${2:-/srv/dago-domenai}

echo -e "${YELLOW}üìã Deployment Configuration:${NC}"
echo "   Server:      $SERVER"
echo "   Path:        $DEPLOY_PATH"
echo ""

# Confirm before proceeding
read -p "Continue with deployment? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled."
    exit 0
fi

echo ""
echo -e "${YELLOW}üì¶ Step 1: Syncing files...${NC}"

# Sync files using rsync (excludes unnecessary files)
rsync -avz --progress \
  --exclude '.venv' \
  --exclude '__pycache__' \
  --exclude '*.pyc' \
  --exclude '.git' \
  --exclude 'logs/*' \
  --exclude 'exports/*' \
  --exclude '.pytest_cache' \
  --exclude '.DS_Store' \
  --exclude 'nohup.out' \
  --exclude '.env' \
  --exclude '.env.local' \
  . $SERVER:$DEPLOY_PATH/

echo -e "${GREEN}‚úÖ Files synced successfully${NC}"
echo ""

echo -e "${YELLOW}üîß Step 2: Setting up environment on server...${NC}"

# Run setup commands on remote server
ssh $SERVER bash << 'ENDSSH'
set -e

# Get deploy path from environment or use default
DEPLOY_PATH="${DEPLOY_PATH:-/srv/dago-domenai}"

cd $DEPLOY_PATH

echo "üìç Working directory: $(pwd)"

# Check if Python 3 is installed
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 not found. Please install Python 3.9+ first."
    exit 1
fi

echo "‚úÖ Python found: $(python3 --version)"

# Create virtual environment if it doesn't exist
if [ ! -d ".venv" ]; then
    echo "üì¶ Creating virtual environment..."
    python3 -m venv .venv
else
    echo "‚úÖ Virtual environment already exists"
fi

# Activate and install dependencies
echo "üì• Installing Python dependencies..."
source .venv/bin/activate
pip install --quiet --upgrade pip
pip install --quiet -r requirements.app.txt

echo "‚úÖ Dependencies installed"

# Create directories
mkdir -p logs exports

# Set permissions
chmod +x monitor_scan.sh 2>/dev/null || true
chmod +x db/setup.sh 2>/dev/null || true

# Create .env file if it doesn't exist
if [ ! -f ".env" ]; then
    echo "üìù Creating .env file..."
    cat > .env << 'ENVEOF'
# Environment Configuration for DAGO Domain Analyzer
# Generated by deploy.sh

# Database Connection
DATABASE_URL=postgresql://user:password@localhost:5432/domenai

# Environment
ENV=production
DEBUG=false

# Logging
LOG_LEVEL=INFO

# Future: API settings (when implemented)
SECRET_KEY=change-me-to-random-string
PORT=8000
ENVEOF
    echo "‚úÖ .env file created (update with actual credentials)"
else
    echo "‚úÖ .env file already exists"
fi

echo "‚úÖ Environment setup complete"

ENDSSH

echo -e "${GREEN}‚úÖ Remote setup complete${NC}"
echo ""

# Database setup
echo -e "${YELLOW}üóÑÔ∏è  Step 3: Database setup${NC}"
echo ""
read -p "Do you want to set up the PostgreSQL database now? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    echo "Please provide database connection details:"
    read -p "Database host [localhost]: " DB_HOST
    DB_HOST=${DB_HOST:-localhost}
    
    read -p "Database port [5432]: " DB_PORT
    DB_PORT=${DB_PORT:-5432}
    
    read -p "Database name [domenai]: " DB_NAME
    DB_NAME=${DB_NAME:-domenai}
    
    read -p "Database user [postgres]: " DB_USER
    DB_USER=${DB_USER:-postgres}
    
    read -sp "Database password: " DB_PASSWORD
    echo
    
    echo ""
    echo "Database configuration:"
    echo "  Host: $DB_HOST"
    echo "  Port: $DB_PORT"
    echo "  Database: $DB_NAME"
    echo "  User: $DB_USER"
    echo ""
    
    # Export DATABASE_URL for remote use
    export DATABASE_URL="postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME"
    
    # Run database setup on remote server
    ssh $SERVER "export DATABASE_URL='$DATABASE_URL' DEPLOY_PATH='$DEPLOY_PATH'; bash -s" << 'ENDSSH'
set -e

cd $DEPLOY_PATH

# Check if psql is available
if ! command -v psql &> /dev/null; then
    echo "‚ö†Ô∏è  psql not found. Installing PostgreSQL client..."
    sudo apt-get update -qq
    sudo apt-get install -y postgresql-client
fi

echo "üîç Testing database connection..."
if ! psql "$DATABASE_URL" -c '\q' 2>/dev/null; then
    echo "‚ùå Cannot connect to database. Please check your credentials."
    echo ""
    echo "You can run database setup manually later:"
    echo "  1. SSH to server: ssh $SERVER"
    echo "  2. Set DATABASE_URL: export DATABASE_URL='postgresql://user:pass@host:port/dbname'"
    echo "  3. Run setup: cd $DEPLOY_PATH && ./db/setup.sh"
    exit 1
fi

echo "‚úÖ Database connection successful"

echo "üìã Applying database schema..."
psql "$DATABASE_URL" -f db/schema.sql

echo "‚úÖ Database schema applied successfully"

echo ""
echo "üìä Database summary:"
psql "$DATABASE_URL" -t -c "SELECT 'Tables: ' || COUNT(*) FROM information_schema.tables WHERE table_schema='public' AND table_name IN ('domains','tasks','results','domain_discoveries');"
psql "$DATABASE_URL" -t -c "SELECT 'Meta profiles: ' || COUNT(*) FROM tasks WHERE is_meta_profile = TRUE;"

ENDSSH
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Database setup successful${NC}"
        
        # Update .env and config.yaml on remote server with DATABASE_URL
        echo ""
        echo "üìù Updating .env and config.yaml with database connection..."
        ssh $SERVER "export DATABASE_URL='$DATABASE_URL' DEPLOY_PATH='$DEPLOY_PATH'; bash -s" << 'ENDSSH'
cd $DEPLOY_PATH

# Update .env file
if [ -f ".env" ]; then
    # Backup .env
    cp .env .env.bak
    
    # Update DATABASE_URL in .env
    if grep -q "^DATABASE_URL=" .env; then
        sed -i "s|^DATABASE_URL=.*|DATABASE_URL=\"$DATABASE_URL\"|" .env
        echo "‚úÖ DATABASE_URL updated in .env"
    else
        echo "DATABASE_URL=\"$DATABASE_URL\"" >> .env
        echo "‚úÖ DATABASE_URL added to .env"
    fi
    
    # Set production environment
    if grep -q "^ENV=" .env; then
        sed -i "s|^ENV=.*|ENV=production|" .env
    else
        echo "ENV=production" >> .env
    fi
    
    # Disable debug mode
    if grep -q "^DEBUG=" .env; then
        sed -i "s|^DEBUG=.*|DEBUG=false|" .env
    else
        echo "DEBUG=false" >> .env
    fi
    
    echo "‚úÖ .env configured for production"
fi

# Update config.yaml (backup method)
if [ -f "config.yaml" ]; then
    cp config.yaml config.yaml.bak
    
    if ! grep -q "postgres_url: postgresql://" config.yaml; then
        sed -i "s|postgres_url:.*|postgres_url: \"$DATABASE_URL\"|" config.yaml
        echo "‚úÖ Database URL updated in config.yaml"
    fi
    
    # Set production environment in config.yaml
    sed -i "s|^env:.*|env: production|" config.yaml
    sed -i "s|^debug:.*|debug: false|" config.yaml
    echo "‚úÖ config.yaml configured for production"
fi

ENDSSH
    
        echo ""
        echo -e "${YELLOW}üí° Tip:${NC} For advanced database operations (verify, stats, rebuild):"
        echo "   ssh $SERVER 'cd $DEPLOY_PATH && ./db/setup.sh'"
    else
        echo -e "${RED}‚ùå Database setup failed${NC}"
        echo ""
        echo "You can run database setup manually later:"
        echo "  1. SSH to server: ssh $SERVER"
        echo "  2. Run interactive setup: cd $DEPLOY_PATH && ./db/setup.sh"
    fi
else
    echo "‚è≠Ô∏è  Skipping database setup"
    echo ""
    echo "To set up database later, run on the server:"
    echo "  cd $DEPLOY_PATH && ./db/setup.sh"
fi


echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}‚úÖ Deployment Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo -e "${YELLOW}üìù Next Steps:${NC}"
echo ""
echo "1. Verify configuration files (database credentials are set):"
echo "   ssh $SERVER 'cd $DEPLOY_PATH && cat .env'"
echo ""
echo "2. Update additional settings if needed:"
echo "   - API keys or external service credentials"
echo "   - Rate limits (config.yaml: checks.whois.whois_rate_limit)"
echo "   - Network timeouts (config.yaml: network.request_timeout)"
echo "   - SECRET_KEY in .env (for future API features)"
echo ""
echo "3. Test the installation:"
echo "   ssh $SERVER 'cd $DEPLOY_PATH && source .venv/bin/activate && python -m src.orchestrator --domain debesyla.lt --profiles quick-whois'"
echo ""
echo "4. Set up scheduled scans (optional):"
echo "   - Systemd service: See docs/DEPLOYMENT_GUIDE.md"
echo "   - Cron job: See docs/DEPLOYMENT_GUIDE.md"
echo ""
echo "5. Configure web server (optional):"
echo "   Point your domain to $DEPLOY_PATH/exports/ to serve results"
echo ""
echo -e "${GREEN}üìö Full deployment guide: docs/DEPLOYMENT_GUIDE.md${NC}"
echo ""
